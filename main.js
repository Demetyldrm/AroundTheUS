!function(){"use strict";class e{constructor(e,t,s,r,n){this._id=e._id,this._name=e.name,this._link=e.link,this._handleImageClick=s,this._cardSelector=t,this._handleCardDelete=r,this._isLiked=e.isLiked,this._handleLikeIcon=n}_setEventListeners(){this._likeButton=this._cardElement.querySelector(".card__like-button"),this._likeButton.addEventListener("click",(()=>{this._handleLikeIcon(this._id,this._isLiked,this._cardElement,this)})),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._deleteButton.addEventListener("click",(()=>{this._handleCardDelete(this._id,this)})),this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link,src:this._name})}))}updateLikes(){this._likeButton.classList.toggle("card__like-button_active")}_updateLikesView(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}deleteCard(){this._cardElement.remove(),this._cardElement=null}handleLikeIcon(){this._likeButton.classList.toggle("card__like-button_active")}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._cardTitle=this._cardElement.querySelector(".card__subtitle"),this._cardTitle.textContent=this._name,this._likeButton=this._cardElement.querySelector(".card__like-button"),this._updateLikesView(),this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._formSelector=e.formSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formEl=t,this._inputEls=[...this._formEl.querySelectorAll(this._inputSelector)]}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent=""}toggleButtonState(){this._hasInvalidInput(this._inputEls)?this._disableButton():this._enableButton()}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_setEventListeners(){this._submitButton=this._formEl.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetForm(){this._formEl.reset(),this._inputEls.forEach((e=>{this._hideInputError(e)})),this.toggleButtonState()}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.querySelector(".modal__close").addEventListener("click",(()=>{this.close(this._popupElement)})),this._popupElement.addEventListener("mousedown",(e=>{e.target.classList.contains("modal_opened")&&this.close()}))}}class r extends s{constructor(e){let{popupSelector:t,handleFormSubmit:s}=e;super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=s}_getInputValues(){const e={};return this._popupForm.querySelectorAll(".modal__input").forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)}))}}class n{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const o=document.querySelector("#profile-edit-button"),i=document.querySelector(".profile__add-button"),a=document.querySelector("#profile-title-input"),l=document.querySelector("#profile-description-input"),c=document.querySelector("#modal-add-card-button"),d=document.querySelector("#profile-edit-modal").querySelector(".modal__form"),h=document.querySelector("#add-card-modal").querySelector(".modal__form"),u=(document.querySelector(".cards__list"),document.querySelector("#card-delete-form"),document.querySelector("#modal-edit-submit-button")),_=document.querySelector("#avatar-edit-modal"),m=document.querySelector(".profile__avatar-edit-button"),p=_.querySelector(".modal__form"),E=(document.querySelector(".profile__image"),document.querySelector(".modal__button")),S={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible",formSelector:".modal__form"},b=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error ${e.status}`)}async getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}async getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}async editProfile(e){let{name:t,about:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._checkResponse)}async addNewCard(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkResponse)}async deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}async cardLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}async cardUnlike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}async updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"7c3f5c74-509e-4796-a690-f2cafe6e2b28","Content-Type":"application/json"}}),v=new class{constructor(e){let{name:t,about:s,avatarElement:r}=e;this._title=document.querySelector(t),this._description=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._title.textContent,about:this._description.textContent}}setUserInfo(e){let{name:t,about:s}=e;this._title.textContent=t,this._description.textContent=s}changeAvatar(e){this._avatarElement.src=e}}({name:".profile__title",about:".profile__description",avatarElement:".profile__image"});b.getUserInfo().then((e=>{e&&(v.setUserInfo({name:e.name,about:e.about}),v.changeAvatar(e.avatar))})).catch((e=>console.log("Error loading user info:",e)));const f=t=>{const s=(t=>{console.log("Card Data:",t);const s=new e(t,"#card-template",(e=>{!function(e){k.open(e)}(e)}),((e,s)=>{console.log("Card ID:",t._id||t.id),function(e,t){const s=e._id||e.id;s?(C.setFormSubmitHandler((()=>{b.deleteCard(s).then((()=>{t.deleteCard(),C.close()})).catch(console.error)})),C.open()):console.error("Card ID is undefined or invalid!")}(t,s)}),((e,t,r)=>{!function(e,t,s,r){t?b.cardUnlike(e).then((()=>{r.updateLikes()})).catch(console.error):b.cardLike(e).then((()=>{r.updateLikes()})).catch(console.error)}(e,t,0,s)}));return s.getView()})(t);y.addItem(s)};let y;b.getInitialCards().then((e=>{e&&(y=new n({items:e,renderer:f},".cards__list"),y.renderItems())})).catch((e=>console.log("Error loading initial cards:",e)));const k=new class extends s{constructor(e){super({popupSelector:e}),this._cardImageElement=this._popupElement.querySelector(".modal__image"),this._cardTitleElement=this._popupElement.querySelector(".modal__caption")}open(e){this._cardImageElement.src=e.link,this._cardImageElement.alt=e.name,this._cardTitleElement.textContent=e.name,super.open()}}("#image-modal");k.setEventListeners();const g=new r({popupSelector:"#profile-edit-modal",handleFormSubmit:function(e){console.log("Profile Data Submitted:",e);const t={title:e.title||" Name",description:e.description||" About"};u.textContent="Saving...",b.editProfile({name:t.title,about:t.description}).then((()=>{v.setUserInfo({name:t.title,about:t.description}),g.close()})).catch(console.error).finally((()=>{u.textContent="Save"}))}});g.setEventListeners();const L=new r({popupSelector:"#add-card-modal",handleFormSubmit:function(e){const t=e.title,s=(e.title,e.url);c.textContent="Saving...",b.addNewCard(t,s).then((e=>{f({name:e.name,link:e.link,alt:e.name,_id:e._id}),h.reset(),L.close(),B.resetForm()})).catch(console.error).finally((()=>{c.textContent="Save"}))}});L.setEventListeners();const C=new class extends s{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent,this._handleFormSubmit=null}setFormSubmitHandler(e){this._handleFormSubmit=e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit?this._handleFormSubmit():console.error("Form submit handler is not set.")}))}}({popupSelector:"#delete-card-modal"});C.setEventListeners();const q=new r({popupSelector:"#avatar-edit-modal",handleFormSubmit:function(e){const t=e.avatar;console.log("Changing the avatar with URL:",t),t&&"string"==typeof t&&""!==t.trim()&&(E.textContent="Saving...",b.updateAvatar(t).then((e=>{e.avatar?v.changeAvatar(e.avatar):console.error("Error returning Avatar URL."),q.close(),w.resetForm()})).catch(console.error).finally((()=>{E.textContent="Save"})))}});q.setEventListeners(),o.addEventListener("click",(()=>{const e=v.getUserInfo();console.log(a),I.resetForm(),a.value=e.name,l.value=e.about,g.open()})),i.addEventListener("click",(()=>{L.open(),B.toggleButtonState()})),m.addEventListener("click",(()=>{q.open()}));const I=new t(S,d);I.enableValidation();const B=new t(S,h);B.enableValidation();const w=new t(S,p);w.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,